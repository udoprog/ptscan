// vim: ft=rust
use crate::{Type, filter::{lexer::Token, ast::*}, value_expr::ast::*};
use num_bigint::BigInt;
use bigdecimal::BigDecimal;

grammar<'input>;

pub Or: Expression = {
    <left:And> <rest:(or And)+> => {
        let mut or = Vec::new();
        or.push(left);
        or.extend(rest.into_iter().map(|(_, r)| r));
        Expression::Or(or)
    },

    And,
}

And: Expression = {
    <left:Filter> <rest:(and Filter)+> => {
        let mut and = Vec::new();
        and.push(left);
        and.extend(rest.into_iter().map(|(_, r)| r));
        Expression::And(and)
    },

    Filter,
}

InnerValueExpr: ValueExpr = {
    value => ValueExpr::Value,
    last => ValueExpr::Last,
    initial => ValueExpr::Initial,
    <number:number> => ValueExpr::Number(number.0, number.1),
    <decimal:decimal> => ValueExpr::Decimal(decimal.0, decimal.1),
    <string:"string"> => ValueExpr::String(string),
    <bytes:bytes> => ValueExpr::Bytes(bytes),
    "*" <expr:InnerValueExpr> => ValueExpr::Deref(Box::new(expr)),
    "&" <expr:InnerValueExpr> => ValueExpr::AddressOf(Box::new(expr)),
};

pub ValueExpr: ValueExpr = {
    <expr:InnerValueExpr> => expr,
    <expr:InnerValueExpr> as <ty:ty> => ValueExpr::As(Box::new(expr), ty),
}

Filter: Expression = {
    <expr:ValueExpr> is <ty:ty> => Expression::IsType(expr, ty),
    <expr:ValueExpr> is not <ty:ty> => Expression::Not(Box::new(Expression::IsType(expr, ty))),
    <expr:ValueExpr> is nan => Expression::IsNan(expr),
    <expr:ValueExpr> is not nan => Expression::Not(Box::new(Expression::IsNan(expr))),
    <lhs:ValueExpr> "==" <rhs:ValueExpr> => Expression::Binary(Op::Eq, lhs, rhs),
    <lhs:ValueExpr> "!=" <rhs:ValueExpr> => Expression::Binary(Op::Neq, lhs, rhs),
    <lhs:ValueExpr> "<=" <rhs:ValueExpr> => Expression::Binary(Op::Lte, lhs, rhs),
    <lhs:ValueExpr> ">=" <rhs:ValueExpr> => Expression::Binary(Op::Gte, lhs, rhs),
    <lhs:ValueExpr> "<" <rhs:ValueExpr> => Expression::Binary(Op::Lt, lhs, rhs),
    <lhs:ValueExpr> ">" <rhs:ValueExpr> => Expression::Binary(Op::Gt, lhs, rhs),
    <lhs:ValueExpr> "^" <rhs:ValueExpr> => Expression::Binary(Op::StartsWith, lhs, rhs),
    <expr:ValueExpr> "~" <pattern:ValueExpr> => Expression::Regex(expr, pattern),
};

extern {
    type Location = usize;
    type Error = crate::filter::lexer::Error;

    enum Token {
        value => Token::Value,
        last => Token::Last,
        initial => Token::Initial,
        and => Token::And,
        or => Token::Or,
        is => Token::Is,
        nan => Token::Nan,
        as => Token::As,
        not => Token::Not,
        "==" => Token::Eq,
        "!=" => Token::Neq,
        "<=" => Token::Lte,
        ">=" => Token::Gte,
        "<" => Token::Lt,
        ">" => Token::Gt,
        "^" => Token::Caret,
        "~" => Token::Tilde,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,
        "*" => Token::Deref,
        "&" => Token::AddressOf,
        number => Token::Number(<BigInt>, <Option<Type>>),
        decimal => Token::Decimal(<BigDecimal>, <Option<Type>>),
        "string" => Token::String(<String>),
        bytes => Token::Bytes(<Vec<u8>>),
        ty => Token::Type(<Type>),
    }
}
