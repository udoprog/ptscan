// vim: ft=rust
use crate::{
    address::Offset,
    pointer::{Pointer, Base, lexer::{Hex, Token}},
};

grammar<'input>;

pub Pointer: Pointer = {
    <base:Base> <offsets:("->" <Deref>)*> => {
        Pointer {
            base,
            offsets: offsets.into_iter().map(Hex::into_offset).collect(),
        }
    },
}

Deref: Hex = {
    <hex:Hex> => hex,
    "+" <hex:Hex> => hex,
    "-" <hex:Hex> => hex.negate(),
}

Base: Base = {
    <address:Hex> <offsets:BaseOffset*> => {
        let mut address = address.into_address();

        for o in offsets {
            address = address.saturating_offset(o);
        }

        Base::Fixed(address)
    },
    <string:String> <offsets:BaseOffset*> => {
        let mut offset = Offset::zero();

        for o in offsets {
            offset = offset.saturating_add(o);
        }

        Base::Module(string, offset)
    },
}

BaseOffset: Offset = {
    "+" <hex:Hex> => hex.into_offset(),
    "-" <hex:Hex> => hex.negate().into_offset(),
}

extern {
    type Location = usize;
    type Error = crate::pointer::lexer::Error;

    enum Token {
        Hex => Token::Hex(<Hex>),
        String => Token::String(<String>),
        "+" => Token::Plus,
        "-" => Token::Minus,
        "->" => Token::Rocket,
    }
}
