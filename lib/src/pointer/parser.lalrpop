// vim: ft=rust
use crate::{
    pointer::{Pointer, Base, lexer::{Hex, Token}},
};

grammar<'input>;

pub Pointer: Pointer = {
    <base:Base> <first:FirstOffset?> <rest:("->" <Hex>)*> => {
        let mut offsets = Vec::new();

        offsets.extend(first.map(Hex::into_offset));
        offsets.extend(rest.into_iter().map(Hex::into_offset));

        Pointer {
            base,
            offsets,
        }
    },
}

FirstOffset: Hex = {
    "+" <hex:Hex> => hex,
    "-" <hex:Hex> => hex.negate(),
}

Base: Base = {
    <address:Hex> => {
        Base::Fixed(address.into_address())
    },
    <string:String> => {
        Base::Module(string)
    },
}

extern {
    type Location = usize;
    type Error = crate::pointer::lexer::Error;

    enum Token {
        Hex => Token::Hex(<Hex>),
        String => Token::String(<String>),
        "+" => Token::Plus,
        "-" => Token::Minus,
        "->" => Token::Rocket,
    }
}
